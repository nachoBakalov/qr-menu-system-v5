import { publicApiClient } from './apiClient';
import type { PublicMenuResponse } from '../types/publicApi';
import { convertPublicToMenu } from '../types/publicApi';
import type { Menu } from '../types';

export const menuService = {
  /**
   * –ü–æ–ª—É—á–∞–≤–∞ –ø—ä–ª–Ω–∞ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ client slug
   * @param slug - —É–Ω–∏–∫–∞–ª–µ–Ω slug –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
   * @returns Promise —Å –º–µ–Ω—é –¥–∞–Ω–Ω–∏
   */
  getMenuBySlug: async (slug: string): Promise<Menu> => {
    try {
      console.log(`üçΩÔ∏è –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–µ–Ω—é –∑–∞ –∫–ª–∏–µ–Ω—Ç: ${slug}`);
      
      const response = await publicApiClient.get<PublicMenuResponse>(`/menu/${slug}`);
      
      if (!response.data.success) {
        throw new Error(response.data.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–µ–Ω—é—Ç–æ');
      }
      
      console.log(`‚úÖ –ú–µ–Ω—é –∑–∞—Ä–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:`, {
        menuTitle: response.data.data.menu.name,
        categoriesCount: response.data.data.menu.categories?.length || 0,
        clientName: response.data.data.client?.name,
      });
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–º–µ –ø—É–±–ª–∏—á–Ω–∏—è API –æ—Ç–≥–æ–≤–æ—Ä –∫—ä–º legacy Menu —Ñ–æ—Ä–º–∞—Ç
      return convertPublicToMenu(response.data.data);
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–µ–Ω—é:', error);
      
      if (error instanceof Error) {
        throw error;
      }
      
      throw new Error('–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–µ–Ω—é—Ç–æ. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.');
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∏
   * @param slug - client slug  
   * @param categoryId - ID –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
   * @returns Promise —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–∞–Ω–Ω–∏
   */
  getCategoryItems: async (slug: string, categoryId: number) => {
    try {
      const menu = await menuService.getMenuBySlug(slug);
      const category = menu.categories.find(cat => cat.id === categoryId);
      
      if (!category) {
        throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞');
      }
      
      console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ä–µ–¥–µ–Ω–∞:`, {
        categoryName: category.name,
        itemsCount: category.menuItems?.length || 0,
      });
      
      return category;
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', error);
      throw error;
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç
   * @param slug - client slug
   * @param itemId - ID –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
   * @returns Promise —Å –ø—Ä–æ–¥—É–∫—Ç –¥–∞–Ω–Ω–∏
   */
  getMenuItem: async (slug: string, itemId: number) => {
    try {
      const menu = await menuService.getMenuBySlug(slug);
      
      // –¢—ä—Ä—Å–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—ä–≤ –≤—Å–∏—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (const category of menu.categories) {
        const item = category.menuItems.find(item => item.id === itemId);
        if (item) {
          console.log(`üçî –ü—Ä–æ–¥—É–∫—Ç –∑–∞—Ä–µ–¥–µ–Ω:`, {
            itemName: item.name,
            categoryName: category.name,
            price: `${item.priceBGN} –ª–≤ / ${item.priceEUR} ‚Ç¨`,
          });
          return item;
        }
      }
      
      throw new Error('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω');
    } catch (error) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç:', error);
      throw error;
    }
  }
};

export default menuService;