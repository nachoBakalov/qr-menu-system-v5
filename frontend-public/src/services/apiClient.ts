import axios from 'axios';

// Base URL –æ—Ç environment –∏–ª–∏ fallback –∫—ä–º localhost
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';

// Public API client (no authentication needed)
export const publicApiClient = axios.create({
  baseURL: `${API_BASE_URL}/api/public`,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor –∑–∞ logging
publicApiClient.interceptors.request.use(
  (config) => {
    console.log(`üåê API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå API Request Error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor –∑–∞ error handling
publicApiClient.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error('‚ùå API Response Error:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      url: error.config?.url,
      message: error.message,
    });
    
    // Handle common errors
    if (error.response?.status === 404) {
      throw new Error('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ');
    } else if (error.response?.status >= 500) {
      throw new Error('–°—ä—Ä–≤—ä—Ä–Ω–∞ –≥—Ä–µ—à–∫–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ.');
    } else if (error.code === 'ECONNABORTED') {
      throw new Error('–ó–∞—è–≤–∫–∞—Ç–∞ –∏–∑—Ç–µ—á–µ. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å–∏.');
    }
    
    return Promise.reject(error);
  }
);

export default publicApiClient;