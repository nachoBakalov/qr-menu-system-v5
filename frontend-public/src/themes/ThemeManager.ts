import type { ThemeRegistry, ThemeConfig } from './core/types';

/**
 * Theme Registry - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∏—Ä–∞–Ω–æ –º—è—Å—Ç–æ –∑–∞ –≤—Å–∏—á–∫–∏ —Ç–µ–º–∏
 * –ò–∑–ø–æ–ª–∑–≤–∞ lazy loading –∑–∞ –ø–æ-–¥–æ–±—Ä–∏ performance
 */
export const themeRegistry: ThemeRegistry = {
  'universal': () => import('./universal/config').then(m => m.universalTheme),
  'burger-pizza': () => import('./burger-pizza/config').then(m => m.burgerPizzaTheme),
  'restaurant': () => import('./restaurant/config').then(m => m.restaurantTheme),
};

/**
 * Theme Manager - utilities –∑–∞ —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–º–∏
 */
export class ThemeManager {
  private static instance: ThemeManager;
  private loadedThemes: Map<string, ThemeConfig> = new Map();
  
  static getInstance(): ThemeManager {
    if (!ThemeManager.instance) {
      ThemeManager.instance = new ThemeManager();
    }
    return ThemeManager.instance;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–≤–∞ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ —Ç–µ–º–∏
   */
  getAvailableThemes(): string[] {
    return Object.keys(themeRegistry);
  }
  
  /**
   * –ó–∞—Ä–µ–∂–¥–∞ —Ç–µ–º–∞ (—Å caching)
   */
  async loadTheme(themeName: string): Promise<ThemeConfig> {
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ cache
    if (this.loadedThemes.has(themeName)) {
      return this.loadedThemes.get(themeName)!;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Ç–µ–º–∞—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    if (!themeRegistry[themeName]) {
      throw new Error(`Theme "${themeName}" not found. Available themes: ${this.getAvailableThemes().join(', ')}`);
    }
    
    try {
      // –ó–∞—Ä–µ–∂–¥–∞ —Ç–µ–º–∞—Ç–∞
      const theme = await themeRegistry[themeName]();
      
      // –ó–∞–ø–∞–∑–≤–∞ –≤ cache
      this.loadedThemes.set(themeName, theme);
      
      console.log(`üé® Theme "${theme.displayName}" loaded successfully`);
      return theme;
    } catch (error) {
      console.error(`‚ùå Failed to load theme "${themeName}":`, error);
      throw new Error(`Failed to load theme "${themeName}"`);
    }
  }
  
  /**
   * –ü—Ä–∏–ª–∞–≥–∞ —Ç–µ–º–∞ –∫—ä–º DOM (CSS variables)
   */
  applyTheme(theme: ThemeConfig): void {
    const root = document.documentElement;
    
    // –ü—Ä–∏–ª–∞–≥–∞ —Ü–≤–µ—Ç–æ–≤–µ—Ç–µ
    Object.entries(theme.colors).forEach(([key, value]) => {
      root.style.setProperty(`--color-${this.kebabCase(key)}`, value);
    });
    
    // –ü—Ä–∏–ª–∞–≥–∞ typography
    Object.entries(theme.typography.fontSize).forEach(([key, value]) => {
      root.style.setProperty(`--font-size-${key}`, value);
    });
    
    Object.entries(theme.typography.fontWeight).forEach(([key, value]) => {
      root.style.setProperty(`--font-weight-${key}`, value.toString());
    });
    
    // –ü—Ä–∏–ª–∞–≥–∞ spacing
    Object.entries(theme.spacing).forEach(([key, value]) => {
      root.style.setProperty(`--spacing-${key}`, value);
    });
    
    // –ü—Ä–∏–ª–∞–≥–∞ border radius
    Object.entries(theme.borderRadius).forEach(([key, value]) => {
      root.style.setProperty(`--border-radius-${key}`, value);
    });
    
    // –ü—Ä–∏–ª–∞–≥–∞ shadows
    Object.entries(theme.shadows).forEach(([key, value]) => {
      root.style.setProperty(`--shadow-${key}`, value);
    });
    
    // –ü—Ä–∏–ª–∞–≥–∞ custom CSS variables
    Object.entries(theme.cssVariables).forEach(([key, value]) => {
      root.style.setProperty(key, value);
    });
    
    // –ü—Ä–∏–ª–∞–≥–∞ component-specific variables
    if (theme.components) {
      Object.entries(theme.components).forEach(([, vars]) => {
        Object.entries(vars).forEach(([key, value]) => {
          root.style.setProperty(key, value);
        });
      });
    }
    
    // –ó–∞–ø–∞–∑–≤–∞ —Ç–µ–º–∞—Ç–∞ –≤ localStorage
    localStorage.setItem('selectedTheme', theme.name);
    
    console.log(`üé® Theme "${theme.displayName}" applied to DOM`);
  }
  
  /**
   * –ü–æ–ª—É—á–∞–≤–∞ –∑–∞–ø–∞–∑–µ–Ω–∞—Ç–∞ —Ç–µ–º–∞ –æ—Ç localStorage
   */
  getSavedTheme(): string | null {
    return localStorage.getItem('selectedTheme');
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ç–µ–º–∞ –±–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ template
   */
  getThemeByTemplate(templateName: string): string {
    const templateThemeMap: Record<string, string> = {
      'burger-shop': 'burger-pizza',
      'pizza-place': 'burger-pizza', 
      'fast-food': 'burger-pizza',
      'fine-dining': 'restaurant',
      'wine-bar': 'restaurant',
      'bistro': 'restaurant',
      'cafe': 'universal',
      'bakery': 'universal',
      'default': 'universal',
    };
    
    return templateThemeMap[templateName] || 'universal';
  }
  
  /**
   * Utility function - –ø—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞ camelCase –∫—ä–º kebab-case
   */
  private kebabCase(str: string): string {
    return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
  }
}

export default ThemeManager;

/**
 * Helper function –∑–∞ –ª–µ—Å–µ–Ω –¥–æ—Å—Ç—ä–ø –¥–æ ThemeManager
 */
export const getThemeManager = () => ThemeManager.getInstance();