generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email     String   @unique
  password  String
  name      String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  id        Int      @id @default(autoincrement())

  @@map("users")
}

model Client {
  name        String
  slug        String   @unique
  description String?
  address     String?
  phone       String?
  logo        String?
  slogan      String?
  socialMedia Json?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  id          Int      @id @default(autoincrement())
  menu        Menu?

  @@map("clients")
}

model Template {
  name        String             @unique
  description String?
  type        String?
  image       String?
  active      Boolean            @default(true)
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  id          Int                @id @default(autoincrement())
  menus       Menu[]
  categories  TemplateCategory[]

  @@map("templates")
}

model TemplateCategory {
  name        String
  description String?
  image       String?
  order       Int            @default(0)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  id          Int            @id @default(autoincrement())
  templateId  Int            @map("template_id")
  template    Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  items       TemplateItem[]

  @@map("template_categories")
}

model TemplateItem {
  name               String
  description        String?
  priceBGN           Decimal           @db.Decimal(10, 2)
  priceEUR           Decimal           @db.Decimal(10, 2)
  weight             Int?
  image              String?
  tags               String[]
  allergens          String[]
  addons             Json?
  order              Int               @default(0)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  id                 Int               @id @default(autoincrement())
  templateCategoryId Int               @map("template_category_id")
  category           TemplateCategory  @relation(fields: [templateCategoryId], references: [id], onDelete: Cascade)

  @@map("template_items")
}

model Menu {
  name       String
  active     Boolean    @default(true)
  published  Boolean    @default(false)
  qrCode     String?
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  id         Int        @id @default(autoincrement())
  clientId   Int        @unique @map("client_id")
  templateId Int?       @map("template_id")
  categories Category[]
  items      MenuItem[]
  client     Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template   Template?  @relation(fields: [templateId], references: [id])

  @@map("menus")
}

model Category {
  name        String
  description String?
  image       String?
  order       Int        @default(0)
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  id          Int        @id @default(autoincrement())
  menuId      Int        @map("menu_id")
  menu        Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items       MenuItem[]

  @@map("categories")
}

model MenuItem {
  name        String
  description String?
  priceBGN    Decimal  @db.Decimal(10, 2)
  priceEUR    Decimal  @db.Decimal(10, 2)
  weight      Int?
  weightUnit  String?
  image       String?
  tags        String[]
  allergens   String[]
  addons      Json?
  available   Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  id          Int      @id @default(autoincrement())
  categoryId  Int      @map("category_id")
  menuId      Int      @map("menu_id")
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  menu        Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

enum Role {
  ADMIN
}
