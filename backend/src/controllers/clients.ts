/**
 * Client Controller
 * –£–ø—Ä–∞–≤–ª—è–≤–∞ –≤—Å–∏—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å –∫–ª–∏–µ–Ω—Ç–∏ (—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏)
 */

import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { asyncHandler, createError } from '../middlewares/errorHandler';

const prisma = new PrismaClient();
import { 
  CreateClientDto, 
  UpdateClientDto,
  PaginationParams 
} from '../types';

/**
 * GET /api/clients
 * –í—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏—è
 */
const getAllClients = asyncHandler(async (req: Request, res: Response) => {
  const { page = 1, limit = 10 } = req.query as PaginationParams;

  // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ offset –∑–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è—Ç–∞
  const offset = (page - 1) * limit;

  // –ü–∞—Ä–∞–ª–µ–ª–Ω–æ –∏–∑–≤–∏–∫–≤–∞–Ω–µ –∑–∞ –¥–∞–Ω–Ω–∏ –∏ –æ–±—â –±—Ä–æ–π
  const [clients, total] = await Promise.all([
    prisma.client.findMany({
      skip: offset,
      take: limit,
      orderBy: { createdAt: 'desc' },
      include: {
        menu: {
          select: {
            id: true,
            name: true,
            active: true,
            published: true
          }
        }
      }
    }),
    prisma.client.count()
  ]);

  const totalPages = Math.ceil(total / limit);

  res.json({
    success: true,
    data: clients,
    pagination: {
      page,
      limit,
      total,
      totalPages,
      hasNext: page < totalPages,
      hasPrev: page > 1
    }
  });
});

/**
 * GET /api/clients/:id
 * –í—Ä—ä—â–∞ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∫–ª–∏–µ–Ω—Ç
 */
const getClientById = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const client = await prisma.client.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      menu: {
        include: {
          template: {
            select: {
              id: true,
              name: true,
              description: true
            }
          },
          categories: {
            select: {
              id: true,
              name: true,
              active: true,
              _count: {
                select: {
                  items: true
                }
              }
            }
          },
          _count: {
            select: {
              items: true
            }
          }
        }
      }
    }
  });

  if (!client) {
    throw createError('–ö–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  res.json({
    success: true,
    data: client
  });
});

/**
 * POST /api/clients
 * –°—ä–∑–¥–∞–≤–∞ –Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç
 */
const createClient = asyncHandler(async (req: Request, res: Response) => {
  const clientData: CreateClientDto = req.body;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–µ—Ç–∞
  if (!clientData.name || !clientData.slug) {
    throw createError('–ò–º–µ –∏ slug —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏', 400);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ slug-—ä—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const existingClient = await prisma.client.findUnique({
    where: { slug: clientData.slug }
  });

  if (existingClient) {
    throw createError('–ö–ª–∏–µ–Ω—Ç —Å —Ç–æ–∑–∏ slug –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞', 400);
  }

  // –°—ä–∑–¥–∞–≤–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∞
  const client = await prisma.client.create({
    data: {
      name: clientData.name,
      slug: clientData.slug.toLowerCase(), // Slug –≤–∏–Ω–∞–≥–∏ –≤ –º–∞–ª–∫–∏ –±—É–∫–≤–∏
      description: clientData.description,
      address: clientData.address,
      phone: clientData.phone,
      logo: clientData.logo,
      slogan: clientData.slogan,
      socialMedia: clientData.socialMedia || {}
    }
  });

  console.log('üè™ –°—ä–∑–¥–∞–¥–µ–Ω –Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç:', {
    id: client.id,
    name: client.name,
    slug: client.slug
  });

  res.status(201).json({
    success: true,
    message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    data: client
  });
});

/**
 * PUT /api/clients/:id
 * –†–µ–¥–∞–∫—Ç–∏—Ä–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∫–ª–∏–µ–Ω—Ç
 */
const updateClient = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const updateData: UpdateClientDto = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const existingClient = await prisma.client.findUnique({
    where: { id: parseInt(id) } as any
  });

  if (!existingClient) {
    throw createError('–ö–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –ê–∫–æ —Å–µ –ø—Ä–æ–º–µ–Ω—è slug, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–æ–≤–∏—è—Ç –Ω–µ –µ –∑–∞–µ—Ç
  if (updateData.slug && updateData.slug !== existingClient.slug) {
    const slugExists = await prisma.client.findUnique({
      where: { slug: updateData.slug }
    });

    if (slugExists) {
      throw createError('–ö–ª–∏–µ–Ω—Ç —Å —Ç–æ–∑–∏ slug –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞', 400);
    }
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∞
  const updatedClient = await prisma.client.update({
    where: { id: parseInt(id) } as any,
    data: {
      ...updateData,
      slug: updateData.slug ? updateData.slug.toLowerCase() : undefined
    },
    include: {
      menu: {
        select: {
          id: true,
          name: true,
          active: true,
          published: true
        }
      }
    }
  });

  console.log('üîÑ –û–±–Ω–æ–≤–µ–Ω –∫–ª–∏–µ–Ω—Ç:', {
    id: updatedClient.id,
    name: updatedClient.name,
    changes: Object.keys(updateData)
  });

  res.json({
    success: true,
    message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    data: updatedClient
  });
});

/**
 * DELETE /api/clients/:id
 * –ò–∑—Ç—Ä–∏–≤–∞ –∫–ª–∏–µ–Ω—Ç –∏ –≤—Å–∏—á–∫–∏—Ç–µ –º—É –¥–∞–Ω–Ω–∏
 */
const deleteClient = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const client = await prisma.client.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      menu: {
        select: { id: true, name: true }
      }
    }
  });

  if (!client) {
    throw createError('–ö–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∫–ª–∏–µ–Ω—Ç–∞ (–∫–∞—Å–∫–∞–¥–Ω–æ —Å–µ –∏–∑—Ç—Ä–∏–≤–∞—Ç –∏ –º–µ–Ω—é—Ç–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ –∏ items-–∏—Ç–µ)
  await prisma.client.delete({
    where: { id: parseInt(id) } as any
  });

  console.log('üóëÔ∏è –ò–∑—Ç—Ä–∏—Ç –∫–ª–∏–µ–Ω—Ç:', {
    id: client.id,
    name: client.name,
    hadMenu: !!(client as any).menu
  });

  res.json({
    success: true,
    message: '–ö–ª–∏–µ–Ω—Ç—ä—Ç –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ'
  });
});

/**
 * GET /api/clients/slug/:slug
 * –ù–∞–º–∏—Ä–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ slug (–∑–∞ –ø—É–±–ª–∏—á–µ–Ω –¥–æ—Å—Ç—ä–ø)
 */
const getClientBySlug = asyncHandler(async (req: Request, res: Response) => {
  const { slug } = req.params;

  const client = await prisma.client.findUnique({
    where: { 
      slug: slug.toLowerCase(),
      active: true // –°–∞–º–æ –∞–∫—Ç–∏–≤–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∏
    },
    select: {
      id: true,
      name: true,
      slug: true,
      description: true,
      address: true,
      phone: true,
      logo: true,
      slogan: true,
      socialMedia: true,
      menu: {
        where: {
          published: true // –°–∞–º–æ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–∏ –º–µ–Ω—é—Ç–∞
        },
        include: {
          template: true,
          categories: {
            where: { active: true },
            include: {
              items: {
                where: { available: true },
                orderBy: { order: 'asc' }
              }
            },
            orderBy: { order: 'asc' }
          }
        }
      }
    }
  });

  if (!client) {
    throw createError('–ö–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –∏–ª–∏ –Ω–µ –µ –∞–∫—Ç–∏–≤–µ–Ω', 404);
  }

  if (!client.menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∏–ª–∏ –Ω–µ –µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ', 404);
  }

  res.json({
    success: true,
    data: client
  });
});

export const clientController = {
  getAllClients,
  getClientById,
  createClient,
  updateClient,
  deleteClient,
  getClientBySlug
};