/**
 * MenuItem Controller
 * –£–ø—Ä–∞–≤–ª—è–≤–∞ –≤—Å–∏—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ –≤ –º–µ–Ω—é—Ç–∞—Ç–∞
 */

import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { asyncHandler, createError } from '../middlewares/errorHandler';
import { 
  CreateMenuItemDto, 
  UpdateMenuItemDto,
  PaginationParams 
} from '../types';

const prisma = new PrismaClient();

/**
 * GET /api/menu-items
 * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Ñ–∏–ª—Ç—Ä–∏
 */
const getAllMenuItems = asyncHandler(async (req: Request, res: Response) => {
  const { 
    page = 1, 
    limit = 10, 
    menuId, 
    categoryId,
    available,
    tags,
    search
  }: PaginationParams & { 
    menuId?: number, 
    categoryId?: number,
    available?: boolean,
    tags?: string,
    search?: string
  } = req.query;
  
  const skip = (page - 1) * limit;
  
  // –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ where —É—Å–ª–æ–≤–∏–µ—Ç–æ
  let where: any = {};
  
  if (menuId) {
    where.menuId = parseInt(menuId as unknown as string);
  }
  
  if (categoryId) {
    where.categoryId = parseInt(categoryId as unknown as string);
  }
  
  if (available !== undefined) {
    where.available = String(available) === 'true';
  }
  
  if (tags) {
    const tagArray = tags.split(',').map(tag => tag.trim());
    where.tags = {
      hasSome: tagArray
    };
  }
  
  if (search) {
    where.OR = [
      {
        name: {
          contains: search,
          mode: 'insensitive'
        }
      },
      {
        description: {
          contains: search,
          mode: 'insensitive'
        }
      }
    ];
  }

  const [menuItems, totalCount] = await Promise.all([
    prisma.menuItem.findMany({
      where,
      skip,
      take: limit,
      include: {
        category: {
          select: {
            id: true,
            name: true
          }
        },
        menu: {
          select: {
            id: true,
            name: true,
            client: {
              select: {
                id: true,
                name: true,
                slug: true
              }
            }
          }
        }
      },
      orderBy: [
        { order: 'asc' },
        { createdAt: 'desc' }
      ]
    }),
    prisma.menuItem.count({ where })
  ]);

  const totalPages = Math.ceil(totalCount / limit);

  res.json({
    success: true,
    data: menuItems,
    pagination: {
      currentPage: page,
      totalPages,
      totalCount,
      hasNext: page < totalPages,
      hasPrev: page > 1
    },
    filters: {
      menuId,
      categoryId,
      available,
      tags: tags?.split(','),
      search
    }
  });
});

/**
 * GET /api/menu-items/:id
 * –í—Ä—ä—â–∞ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç
 */
const getMenuItemById = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const menuItem = await prisma.menuItem.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      category: {
        select: {
          id: true,
          name: true,
          description: true
        }
      },
      menu: {
        select: {
          id: true,
          name: true,
          client: {
            select: {
              id: true,
              name: true,
              slug: true
            }
          }
        }
      }
    }
  });

  if (!menuItem) {
    throw createError('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  res.json({
    success: true,
    data: menuItem
  });
});

/**
 * POST /api/menu-items
 * –°—ä–∑–¥–∞–≤–∞ –Ω–æ–≤ –ø—Ä–æ–¥—É–∫—Ç
 */
const createMenuItem = asyncHandler(async (req: Request, res: Response) => {
  const itemData: CreateMenuItemDto = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const category = await prisma.category.findUnique({
    where: { id: itemData.categoryId },
    include: {
      menu: {
        select: {
          id: true,
          name: true
        }
      }
    }
  });

  if (!category) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞)
  if (itemData.menuId !== category.menu?.id) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–æ—Ç–æ –º–µ–Ω—é', 400);
  }

  // –ê–∫–æ –Ω–µ –µ –ø–æ–¥–∞–¥–µ–Ω order, —Å–ª–∞–≥–∞–º–µ –≥–æ –≤ –∫—Ä–∞—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
  let order = itemData.order;
  if (order === undefined) {
    const lastItem = await prisma.menuItem.findFirst({
      where: { categoryId: itemData.categoryId },
      orderBy: { order: 'desc' }
    });
    order = (lastItem?.order || 0) + 1;
  }

  // –°—ä–∑–¥–∞–≤–∞–º–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const menuItem = await prisma.menuItem.create({
    data: {
      name: itemData.name,
      description: itemData.description,
      categoryId: itemData.categoryId,
      menuId: itemData.menuId,
      priceBGN: itemData.priceBGN,
      priceEUR: itemData.priceEUR,
      weight: itemData.weight,
      weightUnit: itemData.weightUnit,
      image: itemData.image,
      tags: itemData.tags || [],
      allergens: itemData.allergens || [],
      addons: itemData.addons as any || null,
      order,
      available: true
    },
    include: {
      category: {
        select: {
          id: true,
          name: true
        }
      },
      menu: {
        select: {
          id: true,
          name: true
        }
      }
    }
  });

  console.log('üçΩÔ∏è –°—ä–∑–¥–∞–¥–µ–Ω –Ω–æ–≤ –ø—Ä–æ–¥—É–∫—Ç:', {
    id: menuItem.id,
    name: menuItem.name,
    category: (menuItem as any).category.name,
    priceBGN: menuItem.priceBGN,
    priceEUR: menuItem.priceEUR
  });

  res.status(201).json({
    success: true,
    message: '–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    data: menuItem
  });
});

/**
 * PUT /api/menu-items/:id
 * –†–µ–¥–∞–∫—Ç–∏—Ä–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –ø—Ä–æ–¥—É–∫—Ç
 */
const updateMenuItem = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const updateData: UpdateMenuItemDto = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const existingItem = await prisma.menuItem.findUnique({
    where: { id: parseInt(id) } as any
  });

  if (!existingItem) {
    throw createError('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –ê–∫–æ —Å–µ –ø—Ä–æ–º–µ–Ω—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–æ–≤–∞—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  if (updateData.categoryId && updateData.categoryId !== existingItem.categoryId) {
    const category = await prisma.category.findUnique({
      where: { id: updateData.categoryId },
      include: {
        menu: {
          select: { id: true }
        }
      }
    });

    if (!category) {
      throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏ –Ω–∞ —Å—ä—â–æ—Ç–æ –º–µ–Ω—é
    if (updateData.menuId && updateData.menuId !== category.menu?.id) {
      throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–æ—Ç–æ –º–µ–Ω—é', 400);
    }
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const updatedItem = await prisma.menuItem.update({
    where: { id: parseInt(id) } as any,
    data: updateData as any,
    include: {
      category: {
        select: {
          id: true,
          name: true
        }
      },
      menu: {
        select: {
          id: true,
          name: true
        }
      }
    }
  });

  console.log('üìù –û–±–Ω–æ–≤–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:', {
    id: updatedItem.id,
    name: updatedItem.name,
    changes: Object.keys(updateData)
  });

  res.json({
    success: true,
    message: '–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ',
    data: updatedItem
  });
});

/**
 * DELETE /api/menu-items/:id
 * –ò–∑—Ç—Ä–∏–≤–∞ –ø—Ä–æ–¥—É–∫—Ç
 */
const deleteMenuItem = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const menuItem = await prisma.menuItem.findUnique({
    where: { id: parseInt(id) } as any,
    select: {
      id: true,
      name: true,
      category: {
        select: {
          name: true
        }
      }
    }
  });

  if (!menuItem) {
    throw createError('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  await prisma.menuItem.delete({
    where: { id: parseInt(id) } as any
  });

  console.log('üóëÔ∏è –ò–∑—Ç—Ä–∏—Ç –ø—Ä–æ–¥—É–∫—Ç:', {
    id: menuItem.id,
    name: menuItem.name,
    category: menuItem.category.name
  });

  res.json({
    success: true,
    message: '–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –µ –∏–∑—Ç—Ä–∏—Ç —É—Å–ø–µ—à–Ω–æ'
  });
});

/**
 * PUT /api/menu-items/:id/availability
 * –ü—Ä–æ–º–µ–Ω—è –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç (–±—ä—Ä–∑–æ –≤–∫–ª—é—á–≤–∞–Ω–µ/–∏–∑–∫–ª—é—á–≤–∞–Ω–µ)
 */
const toggleMenuItemAvailability = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const { available }: { available: boolean } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const menuItem = await prisma.menuItem.findUnique({
    where: { id: parseInt(id) } as any
  });

  if (!menuItem) {
    throw createError('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞
  const updatedItem = await prisma.menuItem.update({
    where: { id: parseInt(id) } as any,
    data: { available },
    select: {
      id: true,
      name: true,
      available: true
    }
  });

  console.log('üîÑ –ü—Ä–æ–º–µ–Ω–µ–Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç:', {
    id: updatedItem.id,
    name: updatedItem.name,
    available: updatedItem.available
  });

  res.json({
    success: true,
    message: `–ü—Ä–æ–¥—É–∫—Ç—ä—Ç "${updatedItem.name}" –µ ${available ? '–≤–∫–ª—é—á–µ–Ω' : '–∏–∑–∫–ª—é—á–µ–Ω'}`,
    data: {
      id: updatedItem.id,
      available: updatedItem.available
    }
  });
});

/**
 * GET /api/menu-items/category/:categoryId
 * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø—É–±–ª–∏—á–µ–Ω endpoint)
 */
const getMenuItemsByCategory = asyncHandler(async (req: Request, res: Response) => {
  const { categoryId } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –∏ –µ –∞–∫—Ç–∏–≤–Ω–∞
  const category = await prisma.category.findUnique({
    where: { 
      id: parseInt(categoryId),
      active: true
    } as any,
    include: {
      menu: {
        select: {
          published: true,
          active: true
        }
      }
    }
  });

  if (!category) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
  }

  // –ó–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ - –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—Ç—Ä–æ–≥–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ –º–µ–Ω—é
  // –í –ø—Ä–æ–¥—É–∫—Ü–∏—è –º–æ–∂–µ—à –¥–∞ –≤–∫–ª—é—á–∏—à —Ç–∞–∑–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–Ω–æ–≤–æ:
  // if (!(category as any).menu?.published || !(category as any).menu?.active) {
  //   throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ', 404);
  // }

  const menuItems = await prisma.menuItem.findMany({
    where: {
      categoryId: parseInt(categoryId),
      available: true
    } as any,
    select: {
      id: true,
      name: true,
      description: true,
      priceBGN: true,
      priceEUR: true,
      weight: true,
      weightUnit: true,
      image: true,
      tags: true,
      allergens: true,
      addons: true,
      order: true
    },
    orderBy: {
      order: 'asc'
    }
  });

  res.json({
    success: true,
    data: menuItems,
    category: {
      id: category.id,
      name: category.name,
      description: category.description
    }
  });
});

/**
 * PUT /api/menu-items/:id/reorder
 * –ü—Ä–æ–º–µ–Ω—è –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
 */
const reorderMenuItem = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const { newOrder }: { newOrder: number } = req.body;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (typeof newOrder !== 'number' || newOrder < 1) {
    throw createError('–ù–æ–≤–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ', 400);
  }

  // –ù–∞–º–∏—Ä–∞–º–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const menuItem = await prisma.menuItem.findUnique({
    where: { id: parseInt(id) } as any,
    select: {
      id: true,
      name: true,
      order: true,
      categoryId: true
    }
  });

  if (!menuItem) {
    throw createError('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –ê–∫–æ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–µ —Å–µ –ø—Ä–æ–º–µ–Ω—è, –≤—Ä—ä—â–∞–º–µ —É—Å–ø–µ—Ö
  if (menuItem.order === newOrder) {
    return res.json({
      success: true,
      message: '–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –≤–µ—á–µ –µ –Ω–∞ —Ç–∞–∑–∏ –ø–æ–∑–∏—Ü–∏—è',
      data: menuItem
    });
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
  const updatedItem = await prisma.menuItem.update({
    where: { id: parseInt(id) } as any,
    data: { order: newOrder }
  });

  console.log('üîÑ –ü—Ä–æ–º–µ–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç:', {
    name: menuItem.name,
    oldOrder: menuItem.order,
    newOrder: updatedItem.order
  });

  res.json({
    success: true,
    message: `–ü–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç "${menuItem.name}" –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newOrder}`,
    data: updatedItem
  });
});

export {
  getAllMenuItems,
  getMenuItemById,
  createMenuItem,
  updateMenuItem,
  deleteMenuItem,
  toggleMenuItemAvailability,
  getMenuItemsByCategory,
  reorderMenuItem
};