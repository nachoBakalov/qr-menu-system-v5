/**
 * Category Controller
 * –£–ø—Ä–∞–≤–ª—è–≤–∞ –≤—Å–∏—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–µ–Ω—é—Ç–∞—Ç–∞
 */

import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { asyncHandler, createError } from '../middlewares/errorHandler';
import { 
  CreateCategoryDto, 
  UpdateCategoryDto,
  PaginationParams 
} from '../types';

const prisma = new PrismaClient();

/**
 * GET /api/categories
 * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏—è
 */
const getAllCategories = asyncHandler(async (req: Request, res: Response) => {
  const { page = 1, limit = 10, menuId }: PaginationParams & { menuId?: number } = req.query;
  
  const skip = (page - 1) * limit;
  
  // –ê–∫–æ –µ –ø–æ–¥–∞–¥–µ–Ω menuId, —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø–æ –Ω–µ–≥–æ
  const where = menuId ? { menuId: parseInt(menuId as unknown as string) } as any : {};

  const [categories, totalCount] = await Promise.all([
    prisma.category.findMany({
      where,
      skip,
      take: limit,
      include: {
        menu: {
          select: {
            id: true,
            name: true,
            client: {
              select: {
                id: true,
                name: true,
                slug: true
              }
            }
          }
        },
        _count: {
          select: {
            items: true
          }
        }
      },
      orderBy: [
        { order: 'asc' },
        { createdAt: 'desc' }
      ]
    }),
    prisma.category.count({ where })
  ]);

  const totalPages = Math.ceil(totalCount / limit);

  res.json({
    success: true,
    data: categories,
    pagination: {
      currentPage: page,
      totalPages,
      totalCount,
      hasNext: page < totalPages,
      hasPrev: page > 1
    }
  });
});

/**
 * GET /api/categories/:id
 * –í—Ä—ä—â–∞ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
const getCategoryById = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const category = await prisma.category.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      menu: {
        select: {
          id: true,
          name: true,
          client: {
            select: {
              id: true,
              name: true,
              slug: true
            }
          }
        }
      },
      items: {
        where: { available: true },
        select: {
          id: true,
          name: true,
          description: true,
          priceBGN: true,
          priceEUR: true,
          weight: true,
          weightUnit: true,
          image: true,
          tags: true,
          allergens: true,
          order: true
        },
        orderBy: {
          order: 'asc'
        }
      },
      _count: {
        select: {
          items: true
        }
      }
    }
  });

  if (!category) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
  }

  res.json({
    success: true,
    data: category
  });
});

/**
 * POST /api/categories
 * –°—ä–∑–¥–∞–≤–∞ –Ω–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –º–µ–Ω—é
 */
const createCategory = asyncHandler(async (req: Request, res: Response) => {
  const categoryData: CreateCategoryDto = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const menu = await prisma.menu.findUnique({
    where: { id: categoryData.menuId }
  });

  if (!menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
  }

  // –ê–∫–æ –Ω–µ –µ –ø–æ–¥–∞–¥–µ–Ω order, —Å–ª–∞–≥–∞–º–µ –≥–æ –≤ –∫—Ä–∞—è
  let order = categoryData.order;
  if (order === undefined) {
    const lastCategory = await prisma.category.findFirst({
      where: { menuId: categoryData.menuId },
      orderBy: { order: 'desc' }
    });
    order = (lastCategory?.order || 0) + 1;
  }

  // –°—ä–∑–¥–∞–≤–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
  const category = await prisma.category.create({
    data: {
      name: categoryData.name,
      description: categoryData.description,
      image: categoryData.image,
      order,
      menuId: categoryData.menuId,
      active: true
    },
    include: {
      menu: {
        select: {
          id: true,
          name: true,
          client: {
            select: {
              id: true,
              name: true
            }
          }
        }
      }
    }
  });

  console.log('üìÇ –°—ä–∑–¥–∞–¥–µ–Ω–∞ –Ω–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', {
    id: category.id,
    name: category.name,
    menu: category.menu.name,
    order: category.order
  });

  res.status(201).json({
    success: true,
    message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
    data: category
  });
});

/**
 * PUT /api/categories/:id
 * –†–µ–¥–∞–∫—Ç–∏—Ä–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
 */
const updateCategory = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const updateData: UpdateCategoryDto = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const existingCategory = await prisma.category.findUnique({
    where: { id: parseInt(id) } as any
  });

  if (!existingCategory) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
  }

  // –ê–∫–æ —Å–µ –ø—Ä–æ–º–µ–Ω—è –º–µ–Ω—é—Ç–æ, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–æ–≤–æ—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  if (updateData.menuId && updateData.menuId !== existingCategory.menuId) {
    const menu = await prisma.menu.findUnique({
      where: { id: updateData.menuId }
    });

    if (!menu) {
      throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
    }
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
  const updatedCategory = await prisma.category.update({
    where: { id: parseInt(id) } as any,
    data: updateData,
    include: {
      menu: {
        select: {
          id: true,
          name: true,
          client: {
            select: {
              id: true,
              name: true
            }
          }
        }
      },
      _count: {
        select: {
          items: true
        }
      }
    }
  });

  console.log('üìù –û–±–Ω–æ–≤–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', {
    id: updatedCategory.id,
    name: updatedCategory.name,
    changes: Object.keys(updateData)
  });

  res.json({
    success: true,
    message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –µ –æ–±–Ω–æ–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
    data: updatedCategory
  });
});

/**
 * DELETE /api/categories/:id
 * –ò–∑—Ç—Ä–∏–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–∏—á–∫–∏—Ç–µ —ù –ø—Ä–æ–¥—É–∫—Ç–∏
 */
const deleteCategory = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const category = await prisma.category.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      _count: {
        select: {
          items: true
        }
      }
    }
  });

  if (!category) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
  }

  // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ (–∫–∞—Å–∫–∞–¥–Ω–æ —Å–µ –∏–∑—Ç—Ä–∏–≤–∞—Ç –∏ items-–∏—Ç–µ)
  await prisma.category.delete({
    where: { id: parseInt(id) } as any
  });

  console.log('üóëÔ∏è –ò–∑—Ç—Ä–∏—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', {
    id: category.id,
    name: category.name,
    hadItems: category._count.items
  });

  res.json({
    success: true,
    message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –µ –∏–∑—Ç—Ä–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ'
  });
});

/**
 * PUT /api/categories/:id/reorder
 * –ü—Ä–æ–º–µ–Ω—è –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–æ-–ø—Ä–æ—Å—Ç–∞ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–∞ move)
 */
const reorderCategory = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const { newOrder }: { newOrder: number } = req.body;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (typeof newOrder !== 'number' || newOrder < 1) {
    throw createError('–ù–æ–≤–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª–Ω–æ —á–∏—Å–ª–æ', 400);
  }

  // –ù–∞–º–∏—Ä–∞–º–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞
  const category = await prisma.category.findUnique({
    where: { id: parseInt(id) } as any,
    select: {
      id: true,
      name: true,
      order: true,
      menuId: true
    }
  });

  if (!category) {
    throw createError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 404);
  }

  // –ê–∫–æ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–µ —Å–µ –ø—Ä–æ–º–µ–Ω—è, –≤—Ä—ä—â–∞–º–µ —É—Å–ø–µ—Ö
  if (category.order === newOrder) {
    return res.json({
      success: true,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –≤–µ—á–µ –µ –Ω–∞ —Ç–∞–∑–∏ –ø–æ–∑–∏—Ü–∏—è',
      data: category
    });
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞
  const updatedCategory = await prisma.category.update({
    where: { id: parseInt(id) } as any,
    data: { order: newOrder }
  });

  console.log('üîÑ –ü—Ä–æ–º–µ–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', {
    category: category.name,
    oldOrder: category.order,
    newOrder: updatedCategory.order
  });

  res.json({
    success: true,
    message: `–ü–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" –µ –ø—Ä–æ–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newOrder}`,
    data: updatedCategory
  });
});

/**
 * GET /api/categories/reorder/:menuId
 * –í—Ä—ä—â–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ —Å –ø—ä–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–æ–¥—Ä–µ–¥–±–∞—Ç–∞ (–∞–¥–º–∏–Ω endpoint)
 */
const getCategoriesForReorder = asyncHandler(async (req: Request, res: Response) => {
  const { menuId } = req.params;

  const categories = await prisma.category.findMany({
    where: {
      menuId: parseInt(menuId),
    } as any,
    select: {
      id: true,
      name: true,
      order: true,
      active: true,
      _count: {
        select: {
          items: true
        }
      }
    },
    orderBy: {
      order: 'asc'
    }
  });

  res.json({
    success: true,
    data: categories,
    message: `–ù–∞–º–µ—Ä–µ–Ω–∏ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –º–µ–Ω—é ${menuId}`
  });
});

/**
 * GET /api/categories/menu/:menuId
 * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–µ–Ω—é (–ø—É–±–ª–∏—á–µ–Ω endpoint)
 */
const getCategoriesByMenu = asyncHandler(async (req: Request, res: Response) => {
  const { menuId } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –∏ –µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ
  const menu = await prisma.menu.findUnique({
    where: { 
      id: parseInt(menuId) as any,
      published: true,
      active: true
    }
  });

  if (!menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ –∏–ª–∏ –Ω–µ –µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ', 404);
  }

  const categories = await prisma.category.findMany({
    where: {
      menuId: parseInt(menuId),
      active: true
    } as any,
    select: {
      id: true,
      name: true,
      description: true,
      image: true,
      order: true,
      _count: {
        select: {
          items: {
            where: { available: true }
          }
        }
      }
    },
    orderBy: {
      order: 'asc'
    }
  });

  res.json({
    success: true,
    data: categories
  });
});

export {
  getAllCategories,
  getCategoryById,
  createCategory,
  updateCategory,
  deleteCategory,
  reorderCategory,
  getCategoriesForReorder,
  getCategoriesByMenu
};