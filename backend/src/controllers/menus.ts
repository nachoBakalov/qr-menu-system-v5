/**
 * Menu Controller
 * –£–ø—Ä–∞–≤–ª—è–≤–∞ –≤—Å–∏—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å –º–µ–Ω—é—Ç–∞
 */

import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { asyncHandler, createError } from '../middlewares/errorHandler';
import { 
  CreateMenuDto, 
  UpdateMenuDto,
  PaginationParams 
} from '../types';

const prisma = new PrismaClient();

/**
 * GET /api/menus
 * –í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –º–µ–Ω—é—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏—è
 */
const getAllMenus = asyncHandler(async (req: Request, res: Response) => {
  const { page = 1, limit = 10 }: PaginationParams = req.query;
  
  const skip = (page - 1) * limit;

  const [menus, totalCount] = await Promise.all([
    prisma.menu.findMany({
      skip,
      take: limit,
      include: {
        client: {
          select: {
            id: true,
            name: true,
            slug: true
          }
        },
        template: {
          select: {
            id: true,
            name: true,
            description: true
          }
        },
        _count: {
          select: {
            categories: true,
            items: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    }),
    prisma.menu.count()
  ]);

  const totalPages = Math.ceil(totalCount / limit);

  res.json({
    success: true,
    data: menus,
    pagination: {
      currentPage: page,
      totalPages,
      totalCount,
      hasNext: page < totalPages,
      hasPrev: page > 1
    }
  });
});

/**
 * GET /api/menus/:id
 * –í—Ä—ä—â–∞ –¥–µ—Ç–∞–π–ª–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–µ–Ω—é
 */
const getMenuById = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const menu = await prisma.menu.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      client: {
        select: {
          id: true,
          name: true,
          slug: true,
          description: true,
          address: true,
          phone: true,
          logo: true
        }
      },
      template: {
        select: {
          id: true,
          name: true,
          description: true,


        }
      },
      categories: {
        where: { active: true },
        select: {
          id: true,
          name: true,
          description: true,
          image: true,
          order: true,
          _count: {
            select: {
              items: true
            }
          }
        },
        orderBy: {
          order: 'asc'
        }
      },
      _count: {
        select: {
          categories: true,
          items: true
        }
      }
    }
  });

  if (!menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
  }

  res.json({
    success: true,
    data: menu
  });
});

/**
 * POST /api/menus
 * –°—ä–∑–¥–∞–≤–∞ –Ω–æ–≤–æ –º–µ–Ω—é –∑–∞ –∫–ª–∏–µ–Ω—Ç
 */
const createMenu = asyncHandler(async (req: Request, res: Response) => {
  const menuData: CreateMenuDto = {
    ...req.body,
    clientId: parseInt(req.body.clientId),
    templateId: req.body.templateId ? parseInt(req.body.templateId) : undefined
  };

  console.log('üîç Debug - menuData:', menuData);
  console.log('üîç Debug - clientId type:', typeof menuData.clientId);
  console.log('üîç Debug - clientId value:', menuData.clientId);

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const client = await prisma.client.findUnique({
    where: { id: menuData.clientId }
  });

  console.log('üîç Debug - found client:', client);

  if (!client) {
    throw createError('–ö–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ä—Ç –≤–µ—á–µ –∏–º–∞ –º–µ–Ω—é
  const existingMenu = await prisma.menu.findUnique({
    where: { clientId: menuData.clientId }
  });

  if (existingMenu) {
    throw createError('–¢–æ–∑–∏ –∫–ª–∏–µ–Ω—Ç –≤–µ—á–µ –∏–º–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–æ –º–µ–Ω—é', 400);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç–µ–º–ø–ª–µ–π—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ (—Å–∞–º–æ –∞–∫–æ –µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–µ–Ω)
  let template = null;
  if (menuData.templateId) {
    template = await prisma.template.findUnique({
      where: { id: menuData.templateId }
    });

    if (!template) {
      throw createError('–¢–µ–º–ø–ª–µ–π—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
    }
  }

  // –°—ä–∑–¥–∞–≤–∞–º–µ –º–µ–Ω—é—Ç–æ
  const menu = await prisma.menu.create({
    data: {
      name: menuData.name,
      clientId: menuData.clientId,
      templateId: menuData.templateId,
      active: true,
      published: false
    },
    include: {
      client: {
        select: {
          id: true,
          name: true,
          slug: true
        }
      },
      template: {
        select: {
          id: true,
          name: true,
          description: true
        }
      }
    }
  });

  console.log('üçΩÔ∏è –°—ä–∑–¥–∞–¥–µ–Ω–æ –Ω–æ–≤–æ –º–µ–Ω—é:', {
    id: menu.id,
    name: menu.name,
    client: menu.client.name,
    template: menu.template?.name
  });

  res.status(201).json({
    success: true,
    message: '–ú–µ–Ω—é—Ç–æ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
    data: menu
  });
});

/**
 * PUT /api/menus/:id
 * –†–µ–¥–∞–∫—Ç–∏—Ä–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–æ –º–µ–Ω—é
 */
const updateMenu = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;
  const updateData: UpdateMenuDto = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const existingMenu = await prisma.menu.findUnique({
    where: { id: parseInt(id) } as any
  });

  if (!existingMenu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
  }

  // –ê–∫–æ —Å–µ –ø—Ä–æ–º–µ–Ω—è —Ç–µ–º–ø–ª–µ–π—Ç—ä—Ç, –ø—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –Ω–æ–≤–∏—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  if (updateData.templateId) {
    const template = await prisma.template.findUnique({
      where: { id: updateData.templateId }
    });

    if (!template) {
      throw createError('–¢–µ–º–ø–ª–µ–π—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω', 404);
    }
  }

  // –û–±–Ω–æ–≤—è–≤–∞–º–µ –º–µ–Ω—é—Ç–æ
  const updatedMenu = await prisma.menu.update({
    where: { id: parseInt(id) } as any,
    data: updateData,
    include: {
      client: {
        select: {
          id: true,
          name: true,
          slug: true
        }
      },
      template: {
        select: {
          id: true,
          name: true,
          description: true
        }
      },
      _count: {
        select: {
          categories: true,
          items: true
        }
      }
    }
  });

  console.log('üìù –û–±–Ω–æ–≤–µ–Ω–æ –º–µ–Ω—é:', {
    id: updatedMenu.id,
    name: updatedMenu.name,
    changes: Object.keys(updateData)
  });

  res.json({
    success: true,
    message: '–ú–µ–Ω—é—Ç–æ –µ –æ–±–Ω–æ–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
    data: updatedMenu
  });
});

/**
 * DELETE /api/menus/:id
 * –ò–∑—Ç—Ä–∏–≤–∞ –º–µ–Ω—é –∏ –≤—Å–∏—á–∫–∏—Ç–µ –º—É –¥–∞–Ω–Ω–∏
 */
const deleteMenu = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const menu = await prisma.menu.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      client: {
        select: { id: true, name: true }
      },
      _count: {
        select: {
          categories: true,
          items: true
        }
      }
    }
  });

  if (!menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
  }

  // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –º–µ–Ω—é—Ç–æ (–∫–∞—Å–∫–∞–¥–Ω–æ —Å–µ –∏–∑—Ç—Ä–∏–≤–∞—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏—Ç–µ –∏ items-–∏—Ç–µ)
  await prisma.menu.delete({
    where: { id: parseInt(id) } as any
  });

  console.log('üóëÔ∏è –ò–∑—Ç—Ä–∏—Ç–æ –º–µ–Ω—é:', {
    id: menu.id,
    name: menu.name,
    client: menu.client.name,
    hadCategories: menu._count.categories,
    hadItems: menu._count.items
  });

  res.json({
    success: true,
    message: '–ú–µ–Ω—é—Ç–æ –µ –∏–∑—Ç—Ä–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ'
  });
});

/**
 * POST /api/menus/:id/publish
 * –ü—É–±–ª–∏–∫—É–≤–∞ –º–µ–Ω—é (–ø—Ä–∞–≤–∏ –≥–æ –¥–æ—Å—Ç—ä–ø–Ω–æ –∑–∞ QR –∫–æ–¥)
 */
const publishMenu = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const menu = await prisma.menu.findUnique({
    where: { id: parseInt(id) } as any,
    include: {
      _count: {
        select: {
          categories: true,
          items: true
        }
      }
    }
  });

  if (!menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–µ–Ω—é—Ç–æ –∏–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏
  if (menu._count.categories === 0) {
    throw createError('–ú–µ–Ω—é—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–∏ –¥–∞ –±—ä–¥–µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ', 400);
  }

  if (menu._count.items === 0) {
    throw createError('–ú–µ–Ω—é—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞ –ø–æ–Ω–µ –µ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–µ–¥–∏ –¥–∞ –±—ä–¥–µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ', 400);
  }

  // –ü—É–±–ª–∏–∫—É–≤–∞–º–µ –º–µ–Ω—é—Ç–æ
  const updatedMenu = await prisma.menu.update({
    where: { id: parseInt(id) } as any,
    data: {
      published: true,
      active: true
    }
  });

  console.log('üì¢ –ü—É–±–ª–∏–∫—É–≤–∞–Ω–æ –º–µ–Ω—é:', {
    id: updatedMenu.id,
    name: updatedMenu.name
  });

  res.json({
    success: true,
    message: '–ú–µ–Ω—é—Ç–æ –µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ',
    data: {
      id: updatedMenu.id,
      published: updatedMenu.published,
      active: updatedMenu.active
    }
  });
});

/**
 * POST /api/menus/:id/unpublish
 * –°–∫—Ä–∏–≤–∞ –º–µ–Ω—é –æ—Ç –ø—É–±–ª–∏—á–µ–Ω –¥–æ—Å—Ç—ä–ø
 */
const unpublishMenu = asyncHandler(async (req: Request, res: Response) => {
  const { id } = req.params;

  const menu = await prisma.menu.findUnique({
    where: { id: parseInt(id) } as any
  });

  if (!menu) {
    throw createError('–ú–µ–Ω—é—Ç–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ', 404);
  }

  const updatedMenu = await prisma.menu.update({
    where: { id: parseInt(id) } as any,
    data: {
      published: false
    }
  });

  console.log('üîí –°–∫—Ä–∏—Ç–æ –º–µ–Ω—é –æ—Ç –ø—É–±–ª–∏—á–µ–Ω –¥–æ—Å—Ç—ä–ø:', {
    id: updatedMenu.id,
    name: updatedMenu.name
  });

  res.json({
    success: true,
    message: '–ú–µ–Ω—é—Ç–æ –µ —Å–∫—Ä–∏—Ç–æ –æ—Ç –ø—É–±–ª–∏—á–µ–Ω –¥–æ—Å—Ç—ä–ø',
    data: {
      id: updatedMenu.id,
      published: updatedMenu.published,
      active: updatedMenu.active
    }
  });
});

export {
  getAllMenus,
  getMenuById,
  createMenu,
  updateMenu,
  deleteMenu,
  publishMenu,
  unpublishMenu
};